import React, { useState, useEffect } from 'react';\nimport { FilterOptions } from '../types/Todo';\nimport './TodoFilter.css';\n\ninterface TodoFilterProps {\n  filter: FilterOptions;\n  onFilterChange: (filter: FilterOptions) => void;\n}\n\nconst TodoFilter: React.FC<TodoFilterProps> = ({ filter, onFilterChange }) => {\n  const [localSearch, setLocalSearch] = useState(filter.search || '');\n\n  // 검색어 디바운싱을 위한 useEffect\n  useEffect(() => {\n    const debounceTimer = setTimeout(() => {\n      onFilterChange({\n        ...filter,\n        search: localSearch\n      });\n    }, 500);\n\n    return () => clearTimeout(debounceTimer);\n  }, [localSearch]);\n\n  const handleFilterChange = (key: keyof FilterOptions, value: any) => {\n    onFilterChange({\n      ...filter,\n      [key]: value\n    });\n  };\n\n  const clearFilters = () => {\n    setLocalSearch('');\n    onFilterChange({\n      completed: undefined,\n      priority: undefined,\n      category: undefined,\n      search: ''\n    });\n  };\n\n  const hasActiveFilters = (\n    filter.completed !== undefined ||\n    filter.priority !== undefined ||\n    filter.category !== undefined ||\n    (filter.search && filter.search.length > 0)\n  );\n\n  return (\n    <div className=\"todo-filter\">\n      <div className=\"filter-header\">\n        <h3>필터 및 검색</h3>\n        {hasActiveFilters && (\n          <button \n            onClick={clearFilters}\n            className=\"clear-filters-btn\"\n            title=\"모든 필터 초기화\"\n          >\n            초기화\n          </button>\n        )}\n      </div>\n      \n      <div className=\"filter-row\">\n        <div className=\"filter-group\">\n          <label htmlFor=\"search\">검색</label>\n          <input\n            type=\"text\"\n            id=\"search\"\n            value={localSearch}\n            onChange={(e) => setLocalSearch(e.target.value)}\n            placeholder=\"제목이나 설명에서 검색...\"\n            className=\"search-input\"\n          />\n        </div>\n      </div>\n      \n      <div className=\"filter-row\">\n        <div className=\"filter-group\">\n          <label htmlFor=\"completed\">상태</label>\n          <select\n            id=\"completed\"\n            value={filter.completed === undefined ? 'all' : filter.completed.toString()}\n            onChange={(e) => {\n              const value = e.target.value;\n              handleFilterChange('completed', value === 'all' ? undefined : value === 'true');\n            }}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">전체</option>\n            <option value=\"false\">미완료</option>\n            <option value=\"true\">완료</option>\n          </select>\n        </div>\n        \n        <div className=\"filter-group\">\n          <label htmlFor=\"priority\">우선순위</label>\n          <select\n            id=\"priority\"\n            value={filter.priority || ''}\n            onChange={(e) => {\n              const value = e.target.value;\n              handleFilterChange('priority', value || undefined);\n            }}\n            className=\"filter-select\"\n          >\n            <option value=\"\">전체</option>\n            <option value=\"high\">높음</option>\n            <option value=\"medium\">보통</option>\n            <option value=\"low\">낮음</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"filter-row\">\n        <div className=\"filter-group full-width\">\n          <label htmlFor=\"category\">카테고리</label>\n          <input\n            type=\"text\"\n            id=\"category\"\n            value={filter.category || ''}\n            onChange={(e) => handleFilterChange('category', e.target.value || undefined)}\n            placeholder=\"카테고리로 필터링...\"\n            className=\"filter-input\"\n          />\n        </div>\n      </div>\n      \n      {hasActiveFilters && (\n        <div className=\"active-filters\">\n          <div className=\"active-filters-label\">활성 필터:</div>\n          <div className=\"filter-chips\">\n            {filter.completed !== undefined && (\n              <span className=\"filter-chip\">\n                상태: {filter.completed ? '완료' : '미완료'}\n                <button\n                  onClick={() => handleFilterChange('completed', undefined)}\n                  className=\"remove-filter\"\n                >\n                  ×\n                </button>\n              </span>\n            )}\n            {filter.priority && (\n              <span className=\"filter-chip\">\n                우선순위: {{\n                  high: '높음',\n                  medium: '보통',\n                  low: '낮음'\n                }[filter.priority]}\n                <button\n                  onClick={() => handleFilterChange('priority', undefined)}\n                  className=\"remove-filter\"\n                >\n                  ×\n                </button>\n              </span>\n            )}\n            {filter.category && (\n              <span className=\"filter-chip\">\n                카테고리: {filter.category}\n                <button\n                  onClick={() => handleFilterChange('category', undefined)}\n                  className=\"remove-filter\"\n                >\n                  ×\n                </button>\n              </span>\n            )}\n            {filter.search && filter.search.length > 0 && (\n              <span className=\"filter-chip\">\n                검색: \"{filter.search}\"\n                <button\n                  onClick={() => {\n                    setLocalSearch('');\n                    handleFilterChange('search', '');\n                  }}\n                  className=\"remove-filter\"\n                >\n                  ×\n                </button>\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TodoFilter;
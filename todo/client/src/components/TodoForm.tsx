import React, { useState } from 'react';\nimport { TodoFormData } from '../types/Todo';\nimport './TodoForm.css';\n\ninterface TodoFormProps {\n  onAddTodo: (todoData: TodoFormData) => Promise<void>;\n}\n\nconst TodoForm: React.FC<TodoFormProps> = ({ onAddTodo }) => {\n  const [formData, setFormData] = useState<TodoFormData>({\n    title: '',\n    description: '',\n    priority: 'medium',\n    category: '',\n    dueDate: '',\n    tags: []\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [tagInput, setTagInput] = useState('');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleAddTag = () => {\n    if (tagInput.trim() && !formData.tags?.includes(tagInput.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        tags: [...(prev.tags || []), tagInput.trim()]\n      }));\n      setTagInput('');\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags?.filter(tag => tag !== tagToRemove) || []\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.title.trim()) return;\n\n    try {\n      setIsSubmitting(true);\n      await onAddTodo({\n        ...formData,\n        title: formData.title.trim(),\n        description: formData.description?.trim() || undefined,\n        category: formData.category?.trim() || undefined\n      });\n\n      // 폼 초기화\n      setFormData({\n        title: '',\n        description: '',\n        priority: 'medium',\n        category: '',\n        dueDate: '',\n        tags: []\n      });\n    } catch (error) {\n      console.error('TODO 추가 실패:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      <h2>새 할 일 추가</h2>\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"title\">제목 *</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          value={formData.title}\n          onChange={handleInputChange}\n          placeholder=\"할 일을 입력하세요\"\n          required\n          disabled={isSubmitting}\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"description\">설명</label>\n        <textarea\n          id=\"description\"\n          name=\"description\"\n          value={formData.description}\n          onChange={handleInputChange}\n          placeholder=\"할 일에 대한 상세 설명 (선택사항)\"\n          rows={3}\n          disabled={isSubmitting}\n        />\n      </div>\n\n      <div className=\"form-row\">\n        <div className=\"form-group\">\n          <label htmlFor=\"priority\">우선순위</label>\n          <select\n            id=\"priority\"\n            name=\"priority\"\n            value={formData.priority}\n            onChange={handleInputChange}\n            disabled={isSubmitting}\n          >\n            <option value=\"low\">낮음</option>\n            <option value=\"medium\">보통</option>\n            <option value=\"high\">높음</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">카테고리</label>\n          <input\n            type=\"text\"\n            id=\"category\"\n            name=\"category\"\n            value={formData.category}\n            onChange={handleInputChange}\n            placeholder=\"예: 업무, 개인, 학습\"\n            disabled={isSubmitting}\n          />\n        </div>\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"dueDate\">마감일</label>\n        <input\n          type=\"datetime-local\"\n          id=\"dueDate\"\n          name=\"dueDate\"\n          value={formData.dueDate}\n          onChange={handleInputChange}\n          disabled={isSubmitting}\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label>태그</label>\n        <div className=\"tag-input-container\">\n          <input\n            type=\"text\"\n            value={tagInput}\n            onChange={(e) => setTagInput(e.target.value)}\n            placeholder=\"태그를 입력하고 추가를 클릭하세요\"\n            onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddTag())}\n            disabled={isSubmitting}\n          />\n          <button \n            type=\"button\" \n            onClick={handleAddTag}\n            className=\"add-tag-btn\"\n            disabled={!tagInput.trim() || isSubmitting}\n          >\n            추가\n          </button>\n        </div>\n        \n        {formData.tags && formData.tags.length > 0 && (\n          <div className=\"tags-container\">\n            {formData.tags.map((tag, index) => (\n              <span key={index} className=\"tag\">\n                {tag}\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemoveTag(tag)}\n                  className=\"remove-tag-btn\"\n                  disabled={isSubmitting}\n                >\n                  ×\n                </button>\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <button \n        type=\"submit\" \n        className=\"submit-btn\"\n        disabled={!formData.title.trim() || isSubmitting}\n      >\n        {isSubmitting ? '추가 중...' : '할 일 추가'}\n      </button>\n    </form>\n  );\n};\n\nexport default TodoForm;
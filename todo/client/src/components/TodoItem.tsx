import React, { useState } from 'react';\nimport { Todo, TodoFormData } from '../types/Todo';\nimport './TodoItem.css';\n\ninterface TodoItemProps {\n  todo: Todo;\n  onToggle: (id: string) => Promise<void>;\n  onUpdate: (id: string, todoData: Partial<TodoFormData>) => Promise<void>;\n  onDelete: (id: string) => Promise<void>;\n}\n\nconst TodoItem: React.FC<TodoItemProps> = ({\n  todo,\n  onToggle,\n  onUpdate,\n  onDelete\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editData, setEditData] = useState({\n    title: todo.title,\n    description: todo.description || '',\n    priority: todo.priority,\n    category: todo.category || '',\n    dueDate: todo.dueDate ? new Date(todo.dueDate).toISOString().slice(0, 16) : ''\n  });\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const formatDate = (date: Date) => {\n    return new Date(date).toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return '#ff4757';\n      case 'medium': return '#ffa502';\n      case 'low': return '#2ed573';\n      default: return '#gray';\n    }\n  };\n\n  const getPriorityText = (priority: string) => {\n    switch (priority) {\n      case 'high': return '높음';\n      case 'medium': return '보통';\n      case 'low': return '낮음';\n      default: return '보통';\n    }\n  };\n\n  const handleToggle = async () => {\n    await onToggle(todo._id);\n  };\n\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditData({\n      title: todo.title,\n      description: todo.description || '',\n      priority: todo.priority,\n      category: todo.category || '',\n      dueDate: todo.dueDate ? new Date(todo.dueDate).toISOString().slice(0, 16) : ''\n    });\n  };\n\n  const handleSaveEdit = async () => {\n    if (!editData.title.trim()) return;\n\n    try {\n      setIsUpdating(true);\n      await onUpdate(todo._id, {\n        ...editData,\n        title: editData.title.trim(),\n        description: editData.description.trim() || undefined,\n        category: editData.category.trim() || undefined,\n        dueDate: editData.dueDate || undefined\n      });\n      setIsEditing(false);\n    } catch (error) {\n      console.error('TODO 수정 실패:', error);\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (window.confirm('이 할 일을 삭제하시겠습니까?')) {\n      try {\n        setIsDeleting(true);\n        await onDelete(todo._id);\n      } catch (error) {\n        console.error('TODO 삭제 실패:', error);\n        setIsDeleting(false);\n      }\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setEditData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  if (isEditing) {\n    return (\n      <div className=\"todo-item editing\">\n        <div className=\"todo-edit-form\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={editData.title}\n            onChange={handleInputChange}\n            className=\"edit-title\"\n            placeholder=\"제목을 입력하세요\"\n            disabled={isUpdating}\n          />\n          \n          <textarea\n            name=\"description\"\n            value={editData.description}\n            onChange={handleInputChange}\n            className=\"edit-description\"\n            placeholder=\"설명 (선택사항)\"\n            rows={2}\n            disabled={isUpdating}\n          />\n          \n          <div className=\"edit-row\">\n            <select\n              name=\"priority\"\n              value={editData.priority}\n              onChange={handleInputChange}\n              className=\"edit-priority\"\n              disabled={isUpdating}\n            >\n              <option value=\"low\">낮음</option>\n              <option value=\"medium\">보통</option>\n              <option value=\"high\">높음</option>\n            </select>\n            \n            <input\n              type=\"text\"\n              name=\"category\"\n              value={editData.category}\n              onChange={handleInputChange}\n              className=\"edit-category\"\n              placeholder=\"카테고리\"\n              disabled={isUpdating}\n            />\n            \n            <input\n              type=\"datetime-local\"\n              name=\"dueDate\"\n              value={editData.dueDate}\n              onChange={handleInputChange}\n              className=\"edit-due-date\"\n              disabled={isUpdating}\n            />\n          </div>\n          \n          <div className=\"edit-actions\">\n            <button\n              onClick={handleSaveEdit}\n              className=\"save-btn\"\n              disabled={!editData.title.trim() || isUpdating}\n            >\n              {isUpdating ? '저장 중...' : '저장'}\n            </button>\n            <button\n              onClick={handleCancelEdit}\n              className=\"cancel-btn\"\n              disabled={isUpdating}\n            >\n              취소\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`todo-item ${todo.completed ? 'completed' : ''} ${isDeleting ? 'deleting' : ''}`}>\n      <div className=\"todo-checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={todo.completed}\n          onChange={handleToggle}\n          id={`todo-${todo._id}`}\n        />\n        <label htmlFor={`todo-${todo._id}`} className=\"checkbox-label\" />\n      </div>\n      \n      <div className=\"todo-content\">\n        <div className=\"todo-header\">\n          <h3 className=\"todo-title\">{todo.title}</h3>\n          <div className=\"todo-meta\">\n            <span \n              className=\"priority-badge\"\n              style={{ backgroundColor: getPriorityColor(todo.priority) }}\n            >\n              {getPriorityText(todo.priority)}\n            </span>\n            {todo.category && (\n              <span className=\"category-badge\">{todo.category}</span>\n            )}\n          </div>\n        </div>\n        \n        {todo.description && (\n          <p className=\"todo-description\">{todo.description}</p>\n        )}\n        \n        <div className=\"todo-info\">\n          <div className=\"todo-dates\">\n            <span className=\"created-date\">\n              생성: {formatDate(todo.createdAt)}\n            </span>\n            {todo.dueDate && (\n              <span className={`due-date ${new Date(todo.dueDate) < new Date() ? 'overdue' : ''}`}>\n                마감: {formatDate(todo.dueDate)}\n              </span>\n            )}\n          </div>\n          \n          {todo.tags && todo.tags.length > 0 && (\n            <div className=\"todo-tags\">\n              {todo.tags.map((tag, index) => (\n                <span key={index} className=\"tag\">{tag}</span>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"todo-actions\">\n        <button\n          onClick={handleEdit}\n          className=\"edit-btn\"\n          title=\"수정\"\n          disabled={isDeleting}\n        >\n          ✏️\n        </button>\n        <button\n          onClick={handleDelete}\n          className=\"delete-btn\"\n          title=\"삭제\"\n          disabled={isDeleting}\n        >\n          {isDeleting ? '🗑️' : '🗑️'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoItem;